{"version":3,"sources":["componets/Main/Chat/messages/Messages.module.css","componets/Main/Chat/Chat.module.css","componets/Main/Chat/Dialogs/Dialogs.module.css","componets/Main/Chat/Dialogs/Dialogs.tsx","componets/Main/Chat/messages/Message.tsx","componets/Main/Chat/messages/MessagesForm.tsx","componets/Main/Chat/messages/Messages.tsx","componets/Main/Chat/Chat.tsx"],"names":["module","exports","Dialogs","React","memo","props","useEffect","getDialogs","dispatch","useDispatch","dialogs","dialogsItems","map","d","Dialog","id","name","userName","url","photos","small","getDialogMessages","className","s","dialogsWrap","commonChatBtn","onClick","dialogsPageActions","cleanDialogMessages","startMessagesListening","dialog","avatar","stopMessagesListening","setDialogId","updateOrAddDialog","src","avaMale","alt","slice","Message","dialogId","isMe","recipientId","senderId","messageWrap","messageWrapOwner","userPhotoContainer","to","userPhoto","ava","message","myMessage","messageType","deleteMessageButton","deleteMessage","MessagesForm","useState","messageText","setMessageText","errorMessage","setErrorMessage","messagesForm","messageInput","value","autoFocus","onChange","e","target","sendMessage","length","chatMessages","sendDialogMessage","currentDialogId","disabled","status","Messages","isAutoscroll","setAutoscroll","messagesAnchorRef","useRef","current","scrollIntoView","behavior","dialogMessages","chatMessagesItems","m","userId","ownerId","photo","dialogMessagesItems","body","senderName","toString","console","log","messagesWithInput","messagesWrap","onScroll","scrollTopMax","scrollTop","style","color","fontSize","ref","Chat","chatContainer","chatStatus"],"mappings":"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","file":"static/js/3.2c7142c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesWrap\":\"Messages_messagesWrap__3hUqa\",\"messageWrap\":\"Messages_messageWrap__2ITiA\",\"messageWrapOwner\":\"Messages_messageWrapOwner__1BnMH\",\"userPhotoContainer\":\"Messages_userPhotoContainer__bsPsX\",\"userName\":\"Messages_userName__2QUC_\",\"message\":\"Messages_message__2b9gd\",\"myMessage\":\"Messages_myMessage__1nJmM\",\"postsForm\":\"Messages_postsForm__2ae_M\",\"messageInput\":\"Messages_messageInput__3otbB\",\"sendMessage\":\"Messages_sendMessage__I4_8u\",\"userPhoto\":\"Messages_userPhoto__qWMuV\",\"errorMessage\":\"Messages_errorMessage__Vb3nM\",\"messagesForm\":\"Messages_messagesForm__T1uMJ\",\"deleteMessageButton\":\"Messages_deleteMessageButton__1fXmX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatContainer\":\"Chat_chatContainer__1itWt\",\"messagesWrap\":\"Chat_messagesWrap__11k-Z\",\"messageWrap\":\"Chat_messageWrap__23j05\",\"messageWrapOwner\":\"Chat_messageWrapOwner__2skcO\",\"userPhotoContainer\":\"Chat_userPhotoContainer__w2vpC\",\"userName\":\"Chat_userName__1NE6V\",\"message\":\"Chat_message__2Jls5\",\"myMessage\":\"Chat_myMessage__11ZHY\",\"postsForm\":\"Chat_postsForm__MiIG0\",\"messageInput\":\"Chat_messageInput__1e4d7\",\"sendMessage\":\"Chat_sendMessage__1TpcS\",\"userPhoto\":\"Chat_userPhoto__1UBwE\",\"errorMessage\":\"Chat_errorMessage__1yGdu\",\"messagesInputBlock\":\"Chat_messagesInputBlock__2qdry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrap\":\"Dialogs_dialogsWrap__2QX5N\",\"commonChatBtn\":\"Dialogs_commonChatBtn__13kzD\",\"userName\":\"Dialogs_userName__1f5V2\",\"dialog\":\"Dialogs_dialog__3X4yL\",\"avatar\":\"Dialogs_avatar__2lVKW\"};","import React, { useEffect } from \"react\"\nimport { dialogsType } from \"../../../../redux/store\"\nimport s from \"./Dialogs.module.css\"\nimport avaMale from \"../../../../img/ava_male.jpeg\";\nimport { useDispatch } from \"react-redux\";\nimport { startMessagesListening, stopMessagesListening } from \"../../../../redux/chat-reducer\";\nimport { dialogsPageActions, updateOrAddDialog } from \"../../../../redux/dialogs-reducer\";\n\n\ntype dialogsPropsType = {\n    dialogs: dialogsType\n\n    getDialogs: () => void\n    getDialogMessages: (dialogId: number) => void\n}\ntype dialogPropsType = {\n    id: number\n    key: number\n    url: string | null\n    name: string\n    getDialogMessages: (dialogId: number) => void\n}\n\n\n\nexport const Dialogs = React.memo((props: dialogsPropsType) => {\n\n    useEffect(() => {\n        props.getDialogs()\n    }, [])\n\n    const dispatch = useDispatch()\n\n    const dialogs = props.dialogs;\n\n    const dialogsItems = dialogs?.map(d => {\n        return <Dialog id={d.id} key={d.id} name={d.userName} url={d.photos.small} getDialogMessages={props.getDialogMessages} />\n    })\n\n    const getChatMessages = () => {\n        dispatch(dialogsPageActions.cleanDialogMessages())\n        dispatch(startMessagesListening())\n    }\n\n    return (\n        <div className={s.dialogsWrap}>\n                <div className={s.commonChatBtn}>\n                    <button onClick={getChatMessages}>Common chat</button>\n                </div>\n            {dialogsItems}\n        </div>\n    )\n})\n\nexport const Dialog = React.memo((props: dialogPropsType) => {\n\n    const dispatch = useDispatch()\n    \n    const getDialogMessages = () => {\n        dispatch(stopMessagesListening())\n        props.getDialogMessages(props.id)\n        dispatch(dialogsPageActions.setDialogId(props.id))\n        dispatch(updateOrAddDialog(props.id))\n    }\n\n    return (\n        <div className={s.dialog}>\n            <div className={s.avatar} onClick={getDialogMessages}>\n                <img src={props.url || avaMale} alt=\"User\" />\n            </div>\n            <div className={s.userName}>{props.name.slice(0, 5) + \"...\"}</div>\n        </div>\n    )\n})\n\nexport default Dialogs\n\n\n","import React from \"react\";\nimport s from \"./Messages.module.css\";\nimport avaMale from \"../../../../img/ava_male.jpeg\";\nimport { NavLink } from \"react-router-dom\"\nimport { profilePageActions } from \"../../../../redux/profile-reducer\";\n\ntype propsType = {\n    id: number | string\n    key: string\n    message: string\n    isMe: boolean\n    ava: string | null\n    userName: string\n    messageType: \"dialog\" | \"commonChat\"\n    senderId: number\n    recipientId: number\n    \n    deleteMessage: (id: number | string, dialogId: number) => void\n}\n\nexport const Message = React.memo((props: propsType) => {\n\n    let dialogId = props.isMe ? props.recipientId : props.senderId\n\n    const deleteMessage = () => {\n        props.deleteMessage(props.id, dialogId)\n    }\n    return (\n        \n        <div className={s.messageWrap + \" \" + (props.isMe && s.messageWrapOwner)}>\n            <div className={s.userPhotoContainer}>\n                <NavLink to={`/profile/${props.id}`}>\n                    <img className={s.userPhoto} src={props.ava || avaMale} alt=\"AVA\" />\n                </NavLink>\n            </div>\n            <div>{props.userName.slice(0, 5) + \"...\"}</div>\n            <div className={s.message + \" \" + (props.isMe && s.myMessage)}>\n                <span>{props.message}</span>\n            </div>\n            {props.messageType === \"dialog\" && \n                <button className={s.deleteMessageButton}\n                    onClick={deleteMessage}>\n                    Delete message\n                </button>\n            }\n        </div>\n            \n        \n    )\n})\n\n\n\n","import React, { useState } from \"react\";\nimport s from \"./Messages.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { sendMessage } from \"../../../../redux/chat-reducer\";\nimport { statusType } from \"../../../../api/chat-api\";\nimport { chatMessageType } from \"./Messages\";\nimport { sendDialogMessage } from \"../../../../redux/dialogs-reducer\";\n\ntype propsType = {\n    status: statusType\n    chatMessages: chatMessageType[] | null\n    currentDialogId: number\n}\n\nexport const MessagesForm = React.memo((props: propsType) => {\n    \n    const [messageText, setMessageText] = useState('')\n    const [errorMessage, setErrorMessage] = useState<string | null>(null)\n\n    const dispatch = useDispatch()\n    \n\n    const onsendMessage = () => {\n        if (!messageText || messageText.length < 1) {\n            setErrorMessage(\"You can not send an empty message\")\n            return\n        } else if (messageText.length >= 100) {\n            setErrorMessage(\"Max length is 100 symbols\")\n            return\n        } else {\n            props.chatMessages \n                ? dispatch(sendMessage(messageText)) \n                : dispatch(sendDialogMessage(messageText, props.currentDialogId))\n            setMessageText('')\n            setErrorMessage(null)\n        }\n        \n    }\n\n    const onMessageTextChange = (e: any) => {\n        setMessageText(e.target.value);\n        \n    }\n\n    return (\n        <div className={s.messagesForm}>\n            <div className={s.messageInput}>\n                <textarea value={messageText} autoFocus\n                    onChange={onMessageTextChange}></textarea>\n            </div>\n            <div className={s.errorMessage}>{errorMessage}</div>\n            <button className={s.sendMessage} onClick={onsendMessage}\n                disabled={props.chatMessages ? props.status !== \"ready\" : false} >\n                Send message\n            </button>\n        </div>\n    )\n})\n\n\n\n","import React, { useEffect, useRef, useState } from \"react\";\nimport s from \"./Messages.module.css\";\nimport { chatMessageAPIType, statusType } from \"../../../../api/chat-api\";\nimport { Message } from \"./Message\";\nimport { MessagesForm } from \"./MessagesForm\";\nimport { dialogMessageType } from \"../../../../api/dialogs-api\";\nimport avaMale from \"../../../../img/ava_male.jpeg\";\n\ntype propsType = {\n    ownerId: number\n    status: statusType\n    chatMessages: chatMessageType[] | null\n    dialogMessages: dialogMessageType[] | null\n    currentDialogId: number\n\n    deleteMessage: (id: number | string, dialogId: number) => void\n}\n\nexport type chatMessageType = chatMessageAPIType & {id: string}\n\n\nexport const Messages = React.memo((props: propsType) => {\n    \n    const [isAutoscroll, setAutoscroll] = useState(true)\n\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        isAutoscroll && messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\n    }, [props.chatMessages, props.dialogMessages])\n\n    const chatMessagesItems = props.chatMessages?.map((m) => {\n        return <Message id={m.userId} key={m.id} isMe={m.userId === props.ownerId}\n            message={m.message} ava={m.photo} userName={m.userName}\n            messageType={\"commonChat\"} deleteMessage = {props.deleteMessage}\n            senderId={1} recipientId={1} />\n    })\n    const dialogMessagesItems = props.dialogMessages?.map((m) => {\n        return <Message id={m.id} key={m.id.toString()} isMe={m.senderId === props.ownerId}\n            message={m.body} ava={avaMale} userName={m.senderName}\n            messageType={\"dialog\"}deleteMessage = {props.deleteMessage}\n            senderId={m.senderId} recipientId={m.recipientId} />\n    })\n\n    if (props.status && props.status === \"error\") {\n        console.log(\"Error Chat\")\n    }\n\n    const messagesScrollHandler = (e: any) => {\n        setAutoscroll(false)\n        \n        if (e.target.scrollTopMax - e.target.scrollTop < 100)\n            setAutoscroll(true)\n        \n    }\n\n    return (\n        \n        \n        <div className={s.messagesWithInput}>\n            <div className={s.messagesWrap} onScroll={messagesScrollHandler}>\n            \n                {(props.status && props.status) === \"error\" && <div style={{color: \"red\", fontSize: \"20px\"}}>Some error</div>}\n                {chatMessagesItems || dialogMessagesItems}\n                \n                <div ref={messagesAnchorRef}></div>\n            \n            </div>\n            <MessagesForm currentDialogId={props.currentDialogId} chatMessages={props.chatMessages} status={props.status} />\n        </div>\n            \n    )\n})\n\n\n\n","import React from \"react\";\nimport { dialogsType } from \"../../../redux/store\";\nimport s from \"./Chat.module.css\";\nimport { chatMessageAPIType, statusType } from \"../../../api/chat-api\";\nimport Dialogs from \"./Dialogs/Dialogs\";\nimport { Messages } from \"./messages/Messages\";\nimport { dialogMessageType } from \"../../../api/dialogs-api\";\n\ntype propsType = {\n    dialogs: dialogsType\n    ownerId: number\n    chatMessages: chatMessageType[] | null\n    chatStatus: statusType\n    dialogMessages: dialogMessageType[] | null\n    currentDialogId: number\n\n    getDialogs: () => void\n    getDialogMessages: (dialogId: number) => void\n    deleteMessage: (id: number | string, dialogId: number) => void\n}\n\nexport type chatMessageType = chatMessageAPIType & {id: string}\n\nconst Chat = React.memo((props: propsType) => {\n\n    return (\n        \n        <div className={s.chatContainer}>\n            <Dialogs dialogs={props.dialogs} getDialogs={props.getDialogs} getDialogMessages={props.getDialogMessages} />\n            <Messages chatMessages={props.chatMessages} dialogMessages={props.dialogMessages} status={props.chatStatus}\n                ownerId={props.ownerId} currentDialogId={props.currentDialogId}\n                deleteMessage={props.deleteMessage} />\n            \n            {/* <Route path=\"chat\" render={() => <Messages messages={props.chatMessages} status={props.chatStatus}\n                ownerId={props.ownerId} />} /> */}\n        </div>\n            \n    )\n})\n\nexport default Chat\n\n\n"],"sourceRoot":""}