{"version":3,"sources":["componets/Main/Chat/messages/Messages.module.css","componets/Main/Chat/Chat.module.css","componets/Main/Chat/Dialogs/Dialogs.module.css","componets/Main/Chat/messages/message/Message.module.css","componets/Main/Chat/Dialogs/Dialogs.tsx","img/icons/delete-icon.png","componets/Main/Chat/messages/message/Message.tsx","componets/Main/Chat/messages/MessagesForm.tsx","componets/Main/Chat/messages/Messages.tsx","componets/Main/Chat/Chat.tsx"],"names":["module","exports","Dialogs","React","memo","props","useEffect","getDialogs","dispatch","useDispatch","dialogs","dialogsItems","map","d","Dialog","id","name","userName","url","photos","small","getDialogMessages","className","s","dialogsWrap","commonChatBtn","Button","click","dialogsPageActions","cleanDialogMessages","startMessagesListening","value","buttonType","dialog","avatar","onClick","stopMessagesListening","setDialogId","updateOrAddDialog","src","avaMale","alt","slice","Message","dialogId","isMe","recipientId","senderId","messageWrap","messageWrapOwner","userPhotoContainer","to","userPhoto","ava","message","myMessage","messageText","messageTextOwner","messageType","menuMessage","menuMessageOwner","deleteIconPic","deleteIcon","deleteMessage","MessagesForm","useState","setMessageText","errorMessage","setErrorMessage","messagesForm","messageInput","Textarea","onChange","e","target","length","chatMessages","sendMessage","sendDialogMessage","currentDialogId","disabled","status","Messages","isAutoscroll","setAutoscroll","messagesAnchorRef","useRef","current","scrollIntoView","behavior","dialogMessages","chatMessagesItems","m","userId","ownerId","photo","dialogMessagesItems","body","senderName","toString","console","log","messagesWithInput","messagesWrap","onScroll","scrollTopMax","scrollTop","style","color","fontSize","ref","Chat","chatContainer","chatStatus"],"mappings":"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","file":"static/js/3.582bab0a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesWrap\":\"Messages_messagesWrap__3hUqa\",\"messageWrap\":\"Messages_messageWrap__2ITiA\",\"messageWrapOwner\":\"Messages_messageWrapOwner__1BnMH\",\"userPhotoContainer\":\"Messages_userPhotoContainer__bsPsX\",\"userName\":\"Messages_userName__2QUC_\",\"message\":\"Messages_message__2b9gd\",\"deleteMessageButton\":\"Messages_deleteMessageButton__1fXmX\",\"myMessage\":\"Messages_myMessage__1nJmM\",\"postsForm\":\"Messages_postsForm__2ae_M\",\"messageInput\":\"Messages_messageInput__3otbB\",\"sendMessage\":\"Messages_sendMessage__I4_8u\",\"userPhoto\":\"Messages_userPhoto__qWMuV\",\"errorMessage\":\"Messages_errorMessage__Vb3nM\",\"messagesForm\":\"Messages_messagesForm__T1uMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatContainer\":\"Chat_chatContainer__1itWt\",\"messagesWrap\":\"Chat_messagesWrap__11k-Z\",\"messageWrap\":\"Chat_messageWrap__23j05\",\"messageWrapOwner\":\"Chat_messageWrapOwner__2skcO\",\"userPhotoContainer\":\"Chat_userPhotoContainer__w2vpC\",\"userName\":\"Chat_userName__1NE6V\",\"message\":\"Chat_message__2Jls5\",\"myMessage\":\"Chat_myMessage__11ZHY\",\"postsForm\":\"Chat_postsForm__MiIG0\",\"messageInput\":\"Chat_messageInput__1e4d7\",\"sendMessage\":\"Chat_sendMessage__1TpcS\",\"userPhoto\":\"Chat_userPhoto__1UBwE\",\"errorMessage\":\"Chat_errorMessage__1yGdu\",\"messagesInputBlock\":\"Chat_messagesInputBlock__2qdry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrap\":\"Dialogs_dialogsWrap__2QX5N\",\"commonChatBtn\":\"Dialogs_commonChatBtn__13kzD\",\"userName\":\"Dialogs_userName__1f5V2\",\"dialog\":\"Dialogs_dialog__3X4yL\",\"avatar\":\"Dialogs_avatar__2lVKW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageWrap\":\"Message_messageWrap__fEmYW\",\"messageWrapOwner\":\"Message_messageWrapOwner__3q3UV\",\"userPhotoContainer\":\"Message_userPhotoContainer__4jdAY\",\"userName\":\"Message_userName__1kNjM\",\"message\":\"Message_message__2XQq1\",\"menuMessage\":\"Message_menuMessage__2h4EW\",\"messageTextOwner\":\"Message_messageTextOwner__1RC2S\",\"menuMessageOwner\":\"Message_menuMessageOwner__3f0hz\",\"deleteIconPic\":\"Message_deleteIconPic__2gnGz\",\"myMessage\":\"Message_myMessage__3IZxD\",\"userPhoto\":\"Message_userPhoto__3leSj\",\"messagesForm\":\"Message_messagesForm__1N9ke\",\"deleteShure\":\"Message_deleteShure__2KIt-\"};","import React, { useEffect } from \"react\"\nimport { dialogsType } from \"../../../../redux/store\"\nimport s from \"./Dialogs.module.css\"\nimport avaMale from \"../../../../img/ava_male.jpeg\";\nimport { useDispatch } from \"react-redux\";\nimport { startMessagesListening, stopMessagesListening } from \"../../../../redux/chat-reducer\";\nimport { dialogsPageActions, updateOrAddDialog } from \"../../../../redux/dialogs-reducer\";\nimport { Button } from \"../../../common/buttons/Button\";\n\n\ntype dialogsPropsType = {\n    dialogs: dialogsType\n\n    getDialogs: () => void\n    getDialogMessages: (dialogId: number) => void\n}\ntype dialogPropsType = {\n    id: number\n    key: number\n    url: string | null\n    name: string\n    getDialogMessages: (dialogId: number) => void\n}\n\n\n\nexport const Dialogs = React.memo((props: dialogsPropsType) => {\n\n    useEffect(() => {\n        props.getDialogs()\n    }, [])\n\n    const dispatch = useDispatch()\n\n    const dialogs = props.dialogs;\n\n    const dialogsItems = dialogs?.map(d => {\n        return <Dialog id={d.id} key={d.id} name={d.userName} url={d.photos.small} getDialogMessages={props.getDialogMessages} />\n    })\n\n    const getChatMessages = () => {\n        dispatch(dialogsPageActions.cleanDialogMessages())\n        dispatch(startMessagesListening())\n    }\n\n    return (\n        <div className={s.dialogsWrap}>\n                <div className={s.commonChatBtn}>\n                    <Button click={getChatMessages} value=\"Common chat\" buttonType=\"commonChat\" />\n                </div>\n            {dialogsItems}\n        </div>\n    )\n})\n\nexport const Dialog = React.memo((props: dialogPropsType) => {\n\n    const dispatch = useDispatch()\n    \n    const getDialogMessages = () => {\n        dispatch(stopMessagesListening())\n        props.getDialogMessages(props.id)\n        dispatch(dialogsPageActions.setDialogId(props.id))\n        dispatch(updateOrAddDialog(props.id))\n    }\n\n    return (\n        <div className={s.dialog}>\n            <div className={s.avatar} onClick={getDialogMessages}>\n                <img src={props.url || avaMale} alt=\"User\" />\n            </div>\n            <div className={s.userName}>{props.name.slice(0, 5) + \"...\"}</div>\n        </div>\n    )\n})\n\nexport default Dialogs\n\n\n","export default __webpack_public_path__ + \"static/media/delete-icon.4663c0b5.png\";","import React from \"react\";\nimport s from \"./Message.module.css\";\nimport avaMale from \"../../../../../img/ava_male.jpeg\";\nimport { NavLink } from \"react-router-dom\"\nimport { Button } from \"../../../../common/buttons/Button\";\nimport deleteIcon from \"../../../../../img/icons/delete-icon.png\"\n\ntype propsType = {\n    id: number | string\n    key: string\n    message: string\n    isMe: boolean\n    ava: string | null\n    userName: string\n    messageType: \"dialog\" | \"commonChat\"\n    senderId: number\n    recipientId: number\n    \n    deleteMessage: (id: number | string, dialogId: number) => void\n}\n\nexport const Message = React.memo((props: propsType) => {\n\n    let dialogId = props.isMe ? props.recipientId : props.senderId\n\n    const deleteMessage = () => {\n        props.deleteMessage(props.id, dialogId)\n    }\n    return (\n        \n        <div className={s.messageWrap + \" \" + (props.isMe && s.messageWrapOwner)}>\n            <div className={s.userPhotoContainer}>\n                <NavLink to={`/profile/${props.id}`}>\n                    <img className={s.userPhoto} src={props.ava || avaMale} alt=\"AVA\" />\n                </NavLink>\n            </div>\n            <div className={s.userName}>{props.userName}</div>\n            <div className={s.message + \" \" + (props.isMe && s.myMessage)}>\n                <span className={s.messageText + \" \" + (props.isMe && s.messageTextOwner)}>{props.message}</span>\n                {props.messageType === \"dialog\" && \n                <div className={s.menuMessage + \" \" + (props.isMe && s.menuMessageOwner)}>\n                    <img className={s.deleteIconPic} src={deleteIcon} onClick={deleteMessage} />\n                </div>\n                }\n            </div>\n\n            {/* <div className={s.deleteShure}>\n                Are you shure?\n                <button>yes</button><button>no</button>\n            </div> */}\n            \n        </div>\n            \n        \n    )\n})\n\n\n\n","import React, { useState } from \"react\";\nimport s from \"./Messages.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { sendMessage } from \"../../../../redux/chat-reducer\";\nimport { statusType } from \"../../../../api/chat-api\";\nimport { chatMessageType } from \"./Messages\";\nimport { sendDialogMessage } from \"../../../../redux/dialogs-reducer\";\nimport { Button } from \"../../../common/buttons/Button\";\nimport { Textarea } from \"../../../common/textarea/Textarea\";\n\ntype propsType = {\n    status: statusType\n    chatMessages: chatMessageType[] | null\n    currentDialogId: number\n}\n\nexport const MessagesForm = React.memo((props: propsType) => {\n    \n    const [messageText, setMessageText] = useState('')\n    const [errorMessage, setErrorMessage] = useState<string | null>(null)\n\n    const dispatch = useDispatch()\n    \n\n    const onsendMessage = () => {\n        if (!messageText || messageText.length < 1) {\n            setErrorMessage(\"You can not send an empty message\")\n            return\n        } else if (messageText.length >= 100) {\n            setErrorMessage(\"Max length is 100 symbols\")\n            return\n        } else {\n            props.chatMessages \n                ? dispatch(sendMessage(messageText)) \n                : dispatch(sendDialogMessage(messageText, props.currentDialogId))\n            setMessageText('')\n            setErrorMessage(null)\n        }\n        \n    }\n\n    const onMessageTextChange = (e: any) => {\n        setMessageText(e.target.value);\n        \n    }\n\n    return (\n        <div className={s.messagesForm}>\n            <div className={s.messageInput}>\n                <Textarea value={messageText}\n                    onChange={onMessageTextChange} />\n            </div>\n            <div className={s.errorMessage}>{errorMessage}</div>\n            <Button click={onsendMessage} value=\"Send message\" buttonType=\"sendMessage\"\n                disabled={props.chatMessages ? props.status !== \"ready\" : false} />\n        </div>\n    )\n})\n\n\n\n","import React, { useEffect, useRef, useState } from \"react\";\nimport s from \"./Messages.module.css\";\nimport { chatMessageAPIType, statusType } from \"../../../../api/chat-api\";\nimport { Message } from \"./message/Message\";\nimport { MessagesForm } from \"./MessagesForm\";\nimport { dialogMessageType } from \"../../../../api/dialogs-api\";\nimport avaMale from \"../../../../img/ava_male.jpeg\";\n\ntype propsType = {\n    ownerId: number\n    status: statusType\n    chatMessages: chatMessageType[] | null\n    dialogMessages: dialogMessageType[] | null\n    currentDialogId: number\n\n    deleteMessage: (id: number | string, dialogId: number) => void\n}\n\nexport type chatMessageType = chatMessageAPIType & {id: string}\n\n\nexport const Messages = React.memo((props: propsType) => {\n    \n    const [isAutoscroll, setAutoscroll] = useState(true)\n\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        isAutoscroll && messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\n    }, [props.chatMessages, props.dialogMessages])\n\n    const chatMessagesItems = props.chatMessages?.map((m) => {\n        return <Message id={m.userId} key={m.id} isMe={m.userId === props.ownerId}\n            message={m.message} ava={m.photo} userName={m.userName}\n            messageType={\"commonChat\"} deleteMessage = {props.deleteMessage}\n            senderId={1} recipientId={1} />\n    })\n    const dialogMessagesItems = props.dialogMessages?.map((m) => {\n        return <Message id={m.id} key={m.id.toString()} isMe={m.senderId === props.ownerId}\n            message={m.body} ava={avaMale} userName={m.senderName}\n            messageType={\"dialog\"}deleteMessage = {props.deleteMessage}\n            senderId={m.senderId} recipientId={m.recipientId} />\n    })\n\n    if (props.status && props.status === \"error\") {\n        console.log(\"Error Chat\")\n    }\n\n    const messagesScrollHandler = (e: any) => {\n        setAutoscroll(false)\n        \n        if (e.target.scrollTopMax - e.target.scrollTop < 100)\n            setAutoscroll(true)\n        \n    }\n\n    return (\n        \n        \n        <div className={s.messagesWithInput}>\n            <div className={s.messagesWrap} onScroll={messagesScrollHandler}>\n            \n                {(props.status && props.status) === \"error\" && <div style={{color: \"red\", fontSize: \"20px\"}}>Some error</div>}\n                {chatMessagesItems || dialogMessagesItems}\n                \n                <div ref={messagesAnchorRef}></div>\n            \n            </div>\n            <MessagesForm currentDialogId={props.currentDialogId} chatMessages={props.chatMessages} status={props.status} />\n        </div>\n            \n    )\n})\n\n\n\n","import React from \"react\";\nimport { dialogsType } from \"../../../redux/store\";\nimport s from \"./Chat.module.css\";\nimport { chatMessageAPIType, statusType } from \"../../../api/chat-api\";\nimport Dialogs from \"./Dialogs/Dialogs\";\nimport { Messages } from \"./messages/Messages\";\nimport { dialogMessageType } from \"../../../api/dialogs-api\";\n\ntype propsType = {\n    dialogs: dialogsType\n    ownerId: number\n    chatMessages: chatMessageType[] | null\n    chatStatus: statusType\n    dialogMessages: dialogMessageType[] | null\n    currentDialogId: number\n\n    getDialogs: () => void\n    getDialogMessages: (dialogId: number) => void\n    deleteMessage: (id: number | string, dialogId: number) => void\n}\n\nexport type chatMessageType = chatMessageAPIType & {id: string}\n\nconst Chat = React.memo((props: propsType) => {\n\n    return (\n        \n        <div className={s.chatContainer}>\n            <Dialogs dialogs={props.dialogs} getDialogs={props.getDialogs} getDialogMessages={props.getDialogMessages} />\n            <Messages chatMessages={props.chatMessages} dialogMessages={props.dialogMessages} status={props.chatStatus}\n                ownerId={props.ownerId} currentDialogId={props.currentDialogId}\n                deleteMessage={props.deleteMessage} />\n            \n            {/* <Route path=\"chat\" render={() => <Messages messages={props.chatMessages} status={props.chatStatus}\n                ownerId={props.ownerId} />} /> */}\n        </div>\n            \n    )\n})\n\nexport default Chat\n\n\n"],"sourceRoot":""}