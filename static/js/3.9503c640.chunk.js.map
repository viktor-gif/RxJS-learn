{"version":3,"sources":["componets/Main/Chat/messages/Messages.module.css","componets/Main/Chat/Chat.module.css","componets/Main/Chat/Dialogs/Dialogs.module.css","componets/Main/Chat/messages/message/Message.module.css","componets/Main/Chat/Dialogs/Dialogs.tsx","img/icons/delete-icon.png","img/icons/spam-icon.png","componets/Main/Chat/messages/message/Message.tsx","componets/Main/Chat/messages/MessagesForm.tsx","componets/Main/Chat/messages/Messages.tsx","componets/Main/Chat/Chat.tsx"],"names":["module","exports","Dialogs","React","memo","props","useEffect","getDialogs","dispatch","useDispatch","dialogs","dialogsItems","map","d","Dialog","id","name","userName","url","photos","small","getDialogMessages","className","s","dialogsWrap","commonChatBtn","Button","click","dialogsPageActions","cleanDialogMessages","startMessagesListening","value","buttonType","dialog","avatar","onClick","stopMessagesListening","setDialogId","updateOrAddDialog","src","avaMale","alt","slice","Message","useState","isActiveDeleteMenu","setActiveDeleteMenu","isDeletedMessage","setDeletedMessage","actionWindowType","setActionWindowType","userPhoto","setUserPhoto","isViewed","setViewed","isActiveBurger","setActiveBurger","useSelector","state","profilePage","profileInfo","setTimeout","dialogsAPI","isViewedMessage","then","res","data","Math","random","isMe","profileAPI","getProfileData","ownerId","senderId","actionText","action1","restoreMessage","valueButton1","messageWrap","messageWrapOwner","userPhotoContainer","to","ava","message","myMessage","messageText","messageTextOwner","viewedMessageIcon","burgerMenu","burgerMenuOwner","burgerMenuCentralElem","deleteShure","activeDeleteMenu","deleteMessage","action2","valueButton2","menuMessageSmallScreen","menuMessageSmallScreenOwner","menuMessageSmallActive","deleteIcon","console","log","spamIcon","ActionsWindow","actionWindow","actionWindowButtons","MessagesForm","setMessageText","errorMessage","setErrorMessage","messagesForm","messageInput","Textarea","onChange","e","target","length","chatMessages","sendMessage","sendDialogMessage","currentDialogId","disabled","status","Messages","isAutoscroll","setAutoscroll","messagesAnchorRef","useRef","current","scrollIntoView","behavior","dialogMessages","chatMessagesItems","m","userId","photo","messageType","recipientId","dialogMessagesItems","body","senderName","toString","messagesWithInput","messagesWrap","onScroll","scrollTopMax","scrollTop","style","color","fontSize","ref","Chat","chatContainer","chatStatus"],"mappings":"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","file":"static/js/3.9503c640.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesWrap\":\"Messages_messagesWrap__3hUqa\",\"messageWrap\":\"Messages_messageWrap__2ITiA\",\"messageWrapOwner\":\"Messages_messageWrapOwner__1BnMH\",\"userPhotoContainer\":\"Messages_userPhotoContainer__bsPsX\",\"userName\":\"Messages_userName__2QUC_\",\"message\":\"Messages_message__2b9gd\",\"deleteMessageButton\":\"Messages_deleteMessageButton__1fXmX\",\"myMessage\":\"Messages_myMessage__1nJmM\",\"postsForm\":\"Messages_postsForm__2ae_M\",\"messageInput\":\"Messages_messageInput__3otbB\",\"sendMessage\":\"Messages_sendMessage__I4_8u\",\"userPhoto\":\"Messages_userPhoto__qWMuV\",\"errorMessage\":\"Messages_errorMessage__Vb3nM\",\"messagesForm\":\"Messages_messagesForm__T1uMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatContainer\":\"Chat_chatContainer__1itWt\",\"messagesWrap\":\"Chat_messagesWrap__11k-Z\",\"messageWrap\":\"Chat_messageWrap__23j05\",\"messageWrapOwner\":\"Chat_messageWrapOwner__2skcO\",\"userPhotoContainer\":\"Chat_userPhotoContainer__w2vpC\",\"userName\":\"Chat_userName__1NE6V\",\"message\":\"Chat_message__2Jls5\",\"myMessage\":\"Chat_myMessage__11ZHY\",\"postsForm\":\"Chat_postsForm__MiIG0\",\"messageInput\":\"Chat_messageInput__1e4d7\",\"sendMessage\":\"Chat_sendMessage__1TpcS\",\"userPhoto\":\"Chat_userPhoto__1UBwE\",\"errorMessage\":\"Chat_errorMessage__1yGdu\",\"messagesInputBlock\":\"Chat_messagesInputBlock__2qdry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrap\":\"Dialogs_dialogsWrap__2QX5N\",\"commonChatBtn\":\"Dialogs_commonChatBtn__13kzD\",\"userName\":\"Dialogs_userName__1f5V2\",\"dialog\":\"Dialogs_dialog__3X4yL\",\"avatar\":\"Dialogs_avatar__2lVKW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageWrap\":\"Message_messageWrap__fEmYW\",\"messageWrapOwner\":\"Message_messageWrapOwner__3q3UV\",\"userPhotoContainer\":\"Message_userPhotoContainer__4jdAY\",\"userName\":\"Message_userName__1kNjM\",\"message\":\"Message_message__2XQq1\",\"menuMessage\":\"Message_menuMessage__2h4EW\",\"messageText\":\"Message_messageText__udswY\",\"messageTextOwner\":\"Message_messageTextOwner__1RC2S\",\"viewedMessageIcon\":\"Message_viewedMessageIcon__Hzfzs\",\"userPhoto\":\"Message_userPhoto__3leSj\",\"messagesForm\":\"Message_messagesForm__1N9ke\",\"deleteShure\":\"Message_deleteShure__2KIt-\",\"activeDeleteMenu\":\"Message_activeDeleteMenu__31LwI\",\"actionWindow\":\"Message_actionWindow__jb21q\",\"actionWindowButtons\":\"Message_actionWindowButtons__3lPYe\",\"burgerMenu\":\"Message_burgerMenu__WcRkl\",\"burgerMenuOwner\":\"Message_burgerMenuOwner__1oOLH\",\"burgerMenuCentralElem\":\"Message_burgerMenuCentralElem__3MBOe\",\"menuMessageSmallScreen\":\"Message_menuMessageSmallScreen__2MgdN\",\"menuMessageSmallScreenOwner\":\"Message_menuMessageSmallScreenOwner__HuqCT\",\"menuMessageSmallActive\":\"Message_menuMessageSmallActive__3j5YD\"};","import React, { useEffect } from \"react\"\nimport { dialogsType } from \"../../../../redux/store\"\nimport s from \"./Dialogs.module.css\"\nimport avaMale from \"../../../../img/ava_male.jpeg\";\nimport { useDispatch } from \"react-redux\";\nimport { startMessagesListening, stopMessagesListening } from \"../../../../redux/chat-reducer\";\nimport { dialogsPageActions, updateOrAddDialog } from \"../../../../redux/dialogs-reducer\";\nimport { Button } from \"../../../common/buttons/Button\";\n\n\ntype dialogsPropsType = {\n    dialogs: dialogsType\n\n    getDialogs: () => void\n    getDialogMessages: (dialogId: number) => void\n}\ntype dialogPropsType = {\n    id: number\n    key: number\n    url: string | null\n    name: string\n    getDialogMessages: (dialogId: number) => void\n}\n\n\n\nexport const Dialogs = React.memo((props: dialogsPropsType) => {\n\n    useEffect(() => {\n        props.getDialogs()\n    }, [])\n\n    const dispatch = useDispatch()\n\n    const dialogs = props.dialogs;\n\n    const dialogsItems = dialogs?.map(d => {\n        return <Dialog id={d.id} key={d.id} name={d.userName} url={d.photos.small} getDialogMessages={props.getDialogMessages} />\n    })\n\n    const getChatMessages = () => {\n        dispatch(dialogsPageActions.cleanDialogMessages())\n        dispatch(startMessagesListening())\n    }\n\n    return (\n        <div className={s.dialogsWrap}>\n                <div className={s.commonChatBtn}>\n                    <Button click={getChatMessages} value=\"Common chat\" buttonType=\"commonChat\" />\n                </div>\n            {dialogsItems}\n        </div>\n    )\n})\n\nexport const Dialog = React.memo((props: dialogPropsType) => {\n\n    const dispatch = useDispatch()\n    \n    const getDialogMessages = () => {\n        dispatch(stopMessagesListening())\n        props.getDialogMessages(props.id)\n        dispatch(dialogsPageActions.setDialogId(props.id))\n        dispatch(updateOrAddDialog(props.id))\n    }\n\n    return (\n        <div className={s.dialog}>\n            <div className={s.avatar} onClick={getDialogMessages}>\n                <img src={props.url || avaMale} alt=\"User\" />\n            </div>\n            <div className={s.userName}>{props.name.slice(0, 5) + \"...\"}</div>\n        </div>\n    )\n})\n\nexport default Dialogs\n\n\n","export default __webpack_public_path__ + \"static/media/delete-icon.4663c0b5.png\";","export default __webpack_public_path__ + \"static/media/spam-icon.c8885cb2.png\";","import React, { useEffect, useState } from \"react\";\nimport s from \"./Message.module.css\";\nimport avaMale from \"../../../../../img/ava_male.jpeg\";\nimport { NavLink } from \"react-router-dom\"\nimport deleteIcon from \"../../../../../img/icons/delete-icon.png\"\nimport spamIcon from \"../../../../../img/icons/spam-icon.png\"\nimport { dialogsAPI } from \"../../../../../api/dialogs-api\";\nimport { Button } from \"../../../../common/buttons/Button\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { stateType } from \"../../../../../redux/store\";\nimport { profileAPI } from \"../../../../../api/api\";\n\ntype propsType = {\n    id: string | number\n    key: string\n    message: string\n    isMe: boolean\n    ava: string | null\n    userName: string\n    messageType: \"dialog\" | \"commonChat\"\n    senderId: number\n    recipientId: number\n    ownerId: number\n    \n    deleteMessage: (id: number | string) => void\n    restoreMessage: (id: number | string) => void\n}\n\nexport const Message = React.memo((props: propsType) => {\n\n    const [isActiveDeleteMenu, setActiveDeleteMenu] = useState(false)\n    const [isDeletedMessage, setDeletedMessage] = useState(false)\n    const [actionWindowType, setActionWindowType] = useState<'delete' | 'restore'>('delete')\n    const [userPhoto, setUserPhoto] = useState<string | null>(null)\n    const [isViewed, setViewed] = useState(false)\n    const [isActiveBurger, setActiveBurger] = useState(false)\n\n    const profileInfo = useSelector((state: stateType) => state.profilePage.profileInfo)\n\n    useEffect(() => {\n        setTimeout(() => {\n            dialogsAPI.isViewedMessage(props.id).then(res => {\n                setViewed(res.data)\n            })\n        }, Math.random() * 5000)\n        \n    }, [])\n\n    useEffect(() => {\n        setTimeout(() => {\n            if (props.isMe) {\n                profileAPI.getProfileData(props.ownerId)\n                    .then(res => setUserPhoto(res.data.photos.small))\n                // dispatch(getProfileData(props.ownerId))\n                // profileInfo && setUserPhoto(profileInfo.photos.small)\n            } else {\n                profileAPI.getProfileData(props.senderId)\n                    .then(res => setUserPhoto(res.data.photos.small))\n                // dispatch(getProfileData(props.senderId))\n                // profileInfo && setUserPhoto(profileInfo.photos.small)\n            }\n        }, Math.random() * 5000)\n    }, [])\n\n    const deleteMessageMenuActive = () => {\n        setActiveDeleteMenu(true)\n        setActiveBurger(false)\n    }\n    const deleteMessage = () => {\n        props.deleteMessage(props.id)\n        setDeletedMessage(true)\n        setActionWindowType('restore')\n    }\n    const addToSpam = () => {\n        console.log('spam')\n        setActiveBurger(false)\n    }\n    const resetDeledteMessage = () => {\n        setActiveDeleteMenu(false)\n    }\n    const restoreMessage = () => {\n        props.restoreMessage(props.id)\n        setDeletedMessage(false)\n        setActiveDeleteMenu(false)\n        setActionWindowType('delete')\n    }\n    \n    const toggleActiveBurgerMenu = () => {\n        isActiveBurger ? setActiveBurger(false) : setActiveBurger(true)\n    }\n    return (\n        <div>\n            {isDeletedMessage \n                ?\n                <ActionsWindow actionText=\"Message was deleted.\"\n                    action1={restoreMessage}\n                    actionWindowType={actionWindowType}\n                    valueButton1=\"Restore\" />\n                \n                :<div className={s.messageWrap + \" \" + (props.isMe && s.messageWrapOwner)}>\n                    <div className={s.userPhotoContainer}>\n                        <NavLink to={`/profile/${props.id}`}>\n                            <img className={s.userPhoto} src={props.ava || userPhoto || avaMale} alt=\"AVA\" />\n                        </NavLink>\n                    </div>\n                    <div className={s.userName}>{props.userName}</div>\n                    <div className={s.message + \" \" + (props.isMe && s.myMessage)}>\n                        <span className={s.messageText + \" \" + (props.isMe && s.messageTextOwner)}>\n                            {props.message}\n                            {isViewed && <span className={s.viewedMessageIcon}>&#10003;</span>}\n                        </span>\n                    \n                        <div className={s.burgerMenu + \" \" + (props.isMe && s.burgerMenuOwner)}\n                            onClick={toggleActiveBurgerMenu}>\n                            <div className={s.burgerMenuCentralElem}>\n                        \n                            </div>\n\n                        </div>\n                        \n                        \n                    </div>\n\n                    <div className={s.deleteShure + ' ' + (isActiveDeleteMenu && s.activeDeleteMenu)}>\n                        <ActionsWindow actionText=\"Are you shure?\"\n                            action1={deleteMessage} action2={resetDeledteMessage}\n                            actionWindowType={actionWindowType}\n                            valueButton1=\"Yes\" valueButton2=\"No\" />\n                    </div>\n\n                        <div className={s.menuMessageSmallScreen + \" \" + (props.isMe && s.menuMessageSmallScreenOwner)  + \" \" + (isActiveBurger && s.menuMessageSmallActive)}>\n                            <ul>\n                            <li onClick={deleteMessageMenuActive}>\n                                <img src={deleteIcon} alt=\"\" />\n                                <span>Delete message</span>\n                            </li>\n                            <li onClick={addToSpam}>\n                                <img src={spamIcon} alt=\"\" />\n                                <span>Add to spam</span>\n                            </li>\n                            </ul>\n                        </div>\n\n                </div>\n            }\n        </div>\n    )\n})\n\ntype confirmWindowPropsType = {\n    actionWindowType: 'delete' | 'restore'\n    actionText: string\n    valueButton1: string\n    valueButton2?: string\n    action1: () => void\n    action2?: () => void\n}\n\nconst ActionsWindow = (props: confirmWindowPropsType) => {\n    return (\n        <div className={s.actionWindow}>\n            <span>{props.actionText}</span>\n            <div className={s.actionWindowButtons}>\n                <Button value={props.valueButton1} click={props.action1} buttonType=\"actionWindow\" />\n                {props.actionWindowType === 'delete'\n                    && <Button value={props.valueButton2 || ''} click={props.action2} buttonType=\"actionWindow\" />\n                }\n            </div>\n        </div>\n    )\n}\n\n\n\n","import React, { useState } from \"react\";\nimport s from \"./Messages.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { sendMessage } from \"../../../../redux/chat-reducer\";\nimport { statusType } from \"../../../../api/chat-api\";\nimport { chatMessageType } from \"./Messages\";\nimport { sendDialogMessage } from \"../../../../redux/dialogs-reducer\";\nimport { Button } from \"../../../common/buttons/Button\";\nimport { Textarea } from \"../../../common/textarea/Textarea\";\n\ntype propsType = {\n    status: statusType\n    chatMessages: chatMessageType[] | null\n    currentDialogId: number\n}\n\nexport const MessagesForm = React.memo((props: propsType) => {\n    \n    const [messageText, setMessageText] = useState('')\n    const [errorMessage, setErrorMessage] = useState<string | null>(null)\n\n    const dispatch = useDispatch()\n    \n\n    const onsendMessage = () => {\n        if (!messageText || messageText.length < 1) {\n            setErrorMessage(\"You can not send an empty message\")\n            return\n        } else if (messageText.length >= 100) {\n            setErrorMessage(\"Max length is 100 symbols\")\n            return\n        } else {\n            props.chatMessages \n                ? dispatch(sendMessage(messageText)) \n                : dispatch(sendDialogMessage(messageText, props.currentDialogId))\n            setMessageText('')\n            setErrorMessage(null)\n        }\n        \n    }\n\n    const onMessageTextChange = (e: any) => {\n        setMessageText(e.target.value);\n        \n    }\n\n    return (\n        <div className={s.messagesForm}>\n            <div className={s.messageInput}>\n                <Textarea value={messageText}\n                    onChange={onMessageTextChange} />\n            </div>\n            <div className={s.errorMessage}>{errorMessage}</div>\n            <Button click={onsendMessage} value=\"Send message\" buttonType=\"sendMessage\"\n                disabled={props.chatMessages ? props.status !== \"ready\" : false} />\n        </div>\n    )\n})\n\n\n\n","import React, { useEffect, useRef, useState } from \"react\";\nimport s from \"./Messages.module.css\";\nimport { chatMessageAPIType, statusType } from \"../../../../api/chat-api\";\nimport { Message } from \"./message/Message\";\nimport { MessagesForm } from \"./MessagesForm\";\nimport { dialogMessageType } from \"../../../../api/dialogs-api\";\nimport avaMale from \"../../../../img/ava_male.jpeg\";\n\ntype propsType = {\n    ownerId: number\n    status: statusType\n    chatMessages: chatMessageType[] | null\n    dialogMessages: dialogMessageType[] | null\n    currentDialogId: number\n\n    deleteMessage: (id: number | string) => void\n    restoreMessage: (id: number | string) => void\n}\n\nexport type chatMessageType = chatMessageAPIType & {id: string}\n\n\nexport const Messages = React.memo((props: propsType) => {\n    // console.log(props.dialogMessages)\n    \n    const [isAutoscroll, setAutoscroll] = useState(true)\n\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n\n    useEffect(() => {\n        isAutoscroll && messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\n    }, [props.chatMessages, props.dialogMessages])\n\n    const chatMessagesItems = props.chatMessages?.map((m) => {\n        return <Message id={m.userId} key={m.id} isMe={m.userId === props.ownerId}\n            message={m.message} ava={m.photo} userName={m.userName}\n            messageType={\"commonChat\"} deleteMessage = {props.deleteMessage}\n            senderId={1} recipientId={1} restoreMessage={props.restoreMessage}\n            ownerId={props.ownerId} />\n    })\n    const dialogMessagesItems = props.dialogMessages?.map((m) => {\n        \n        return <Message id={m.id} key={m.id.toString()} isMe={m.senderId === props.ownerId}\n            message={m.body} ava={null} userName={m.senderName}\n            messageType={\"dialog\"}deleteMessage = {props.deleteMessage}\n            senderId={m.senderId} recipientId={m.recipientId}\n            restoreMessage={props.restoreMessage}\n            ownerId={props.ownerId} />\n    })\n\n    if (props.status && props.status === \"error\") {\n        console.log(\"Error Chat\")\n    }\n\n    const messagesScrollHandler = (e: any) => {\n        setAutoscroll(false)\n        \n        if (e.target.scrollTopMax - e.target.scrollTop < 100)\n            setAutoscroll(true)\n        \n    }\n\n    return (\n        \n        \n        <div className={s.messagesWithInput}>\n            <div className={s.messagesWrap} onScroll={messagesScrollHandler}>\n            \n                {(props.status && props.status) === \"error\" && <div style={{color: \"red\", fontSize: \"20px\"}}>Some error</div>}\n                {chatMessagesItems || dialogMessagesItems}\n                \n                <div ref={messagesAnchorRef}></div>\n            \n            </div>\n            <MessagesForm currentDialogId={props.currentDialogId} chatMessages={props.chatMessages} status={props.status} />\n        </div>\n            \n    )\n})\n\n\n\n","import React from \"react\";\nimport { dialogsType } from \"../../../redux/store\";\nimport s from \"./Chat.module.css\";\nimport { chatMessageAPIType, statusType } from \"../../../api/chat-api\";\nimport Dialogs from \"./Dialogs/Dialogs\";\nimport { Messages } from \"./messages/Messages\";\nimport { dialogMessageType } from \"../../../api/dialogs-api\";\n\ntype propsType = {\n    dialogs: dialogsType\n    ownerId: number\n    chatMessages: chatMessageType[] | null\n    chatStatus: statusType\n    dialogMessages: dialogMessageType[] | null\n    currentDialogId: number\n\n    getDialogs: () => void\n    getDialogMessages: (dialogId: number) => void\n    deleteMessage: (id: number | string) => void\n    restoreMessage: (id: number | string) => void\n}\n\nexport type chatMessageType = chatMessageAPIType & {id: string}\n\nconst Chat = React.memo((props: propsType) => {\n\n    return (\n        \n        <div className={s.chatContainer}>\n            <Dialogs dialogs={props.dialogs} getDialogs={props.getDialogs} getDialogMessages={props.getDialogMessages} />\n            <Messages chatMessages={props.chatMessages} dialogMessages={props.dialogMessages} status={props.chatStatus}\n                ownerId={props.ownerId} currentDialogId={props.currentDialogId}\n                deleteMessage={props.deleteMessage} restoreMessage={props.restoreMessage} />\n            \n            {/* <Route path=\"chat\" render={() => <Messages messages={props.chatMessages} status={props.chatStatus}\n                ownerId={props.ownerId} />} /> */}\n        </div>\n            \n    )\n})\n\nexport default Chat\n\n\n"],"sourceRoot":""}